$date
	Mon Dec 30 13:24:03 2024
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module tb_PipelinedProcessor $end
$var wire 32 ! data_out [31:0] $end
$var wire 32 " address_out [31:0] $end
$var reg 1 # clk $end
$var reg 32 $ data_in [31:0] $end
$var reg 32 % instruction_in [31:0] $end
$var reg 1 & reset $end
$scope module uut $end
$var wire 1 # clk $end
$var wire 32 ' data_in [31:0] $end
$var wire 32 ( instruction_in [31:0] $end
$var wire 1 & reset $end
$var wire 4 ) rt [3:0] $end
$var wire 4 * rs [3:0] $end
$var wire 4 + rd [3:0] $end
$var wire 4 , opcode [3:0] $end
$var wire 16 - imm [15:0] $end
$var reg 32 . EX_MEM_alu_out [31:0] $end
$var reg 32 / EX_MEM_instr [31:0] $end
$var reg 32 0 ID_EX_instr [31:0] $end
$var reg 32 1 ID_EX_regA [31:0] $end
$var reg 32 2 ID_EX_regB [31:0] $end
$var reg 32 3 IF_ID_instr [31:0] $end
$var reg 32 4 IF_ID_pc [31:0] $end
$var reg 32 5 MEM_WB_alu_out [31:0] $end
$var reg 32 6 MEM_WB_data [31:0] $end
$var reg 32 7 MEM_WB_instr [31:0] $end
$var reg 32 8 address_out [31:0] $end
$var reg 32 9 alu_out [31:0] $end
$var reg 32 : data_out [31:0] $end
$var reg 32 ; pc [31:0] $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
$end
#0
$dumpvars
b0 ;
b0 :
bx 9
b0 8
b0 7
b0 6
b0 5
b0 4
b0 3
b0 2
b0 1
b0 0
b0 /
b0 .
b0 -
b0 ,
b0 +
b0 *
b0 )
b0 (
b0 '
1&
b0 %
b0 $
0#
b0 "
b0 !
$end
#5
1#
#10
0#
0&
#15
bx "
bx 8
b100 ;
bx 2
bx 1
bx .
b0 9
1#
#20
0#
b10001100010000000000000000 %
b10001100010000000000000000 (
#25
b0 "
b0 8
b10 *
b11 )
b1 +
bx 5
b0 .
bx 9
b0 2
b0 1
b1000 ;
b100 4
b10001100010000000000000000 3
1#
#30
0#
b10101011001000000000000000000 %
b10101011001000000000000000000 (
#35
b1 ,
b101 *
b110 )
b100 +
bx "
bx 8
b1100 ;
b1000 4
b10101011001000000000000000000 3
bx 2
bx 1
b10001100010000000000000000 0
bx .
b0 9
b0 5
1#
#40
0#
b101000100101110000000000000000 %
b101000100101110000000000000000 (
#45
b0 "
b0 8
b10 ,
b1000 *
b1001 )
b111 +
bx 5
b10001100010000000000000000 /
b0 .
bx 9
b10101011001000000000000000000 0
b10000 ;
b1100 4
b101000100101110000000000000000 3
1#
#50
0#
b11011110101011011011111011101111 $
b11011110101011011011111011101111 '
b10001011000010100000000000000100 %
b10001011000010100000000000000100 (
#55
b1000 ,
b1011 *
b0 )
b1010 +
b100 -
bx "
bx 8
b10100 ;
b10000 4
b10001011000010100000000000000100 3
b101000100101110000000000000000 0
b10101011001000000000000000000 /
bx .
b10001100010000000000000000 7
b0 5
1#
#60
0#
#65
b11011110101011011011111011101111 !
b11011110101011011011111011101111 :
b10101011001000000000000000000 7
b11011110101011011011111011101111 6
b101000100101110000000000000000 /
b100 2
b10001011000010100000000000000100 0
b11000 ;
b10100 4
1#
#70
0#
#75
b11100 ;
b11000 4
b10001011000010100000000000000100 /
b101000100101110000000000000000 7
1#
#80
0#
#85
b10001011000010100000000000000100 7
b100000 ;
b11100 4
1#
#90
0#
#95
b100100 ;
b100000 4
1#
